# Nama workflow yang akan muncul di tab Actions GitHub
name: Generate ConnectSphere ZK Proof

on:
  # 'workflow_dispatch' memungkinkan kita menjalankan workflow ini secara manual
  workflow_dispatch:
    inputs:
      secret_a:
        description: 'Your first secret number (e.g., 12345)'
        required: true
        type: string
      secret_b:
        description: 'Your second secret number (e.g., 67890)'
        required: true
        type: string

jobs:
  generate-proof:
    # Gunakan runner Ubuntu terbaru dari GitHub
    runs-on: ubuntu-latest

    steps:
      # Langkah 1: Checkout kode repositori Anda
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Langkah 2: Instal Rust dan siapkan PATH
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # --- PERBAIKAN DENGAN MEMISAHKAN LANGKAH ---

      # Langkah 3: Instal skrip sp1up
      # Langkah ini HANYA mengunduh dan menempatkan sp1up ke dalam PATH.
      - name: Install sp1up Script
        run: curl -L https://sp1up.succinct.xyz | bash

      # Langkah 4: Jalankan sp1up untuk menginstal toolchain
      # Karena ini adalah LANGKAH BARU, PATH dari langkah sebelumnya sudah diperbarui
      # dan perintah 'sp1up' sekarang dapat ditemukan.
      - name: Run sp1up to Install Toolchain
        shell: bash
        run: |
          # Kita perlu source .bashrc karena installer sp1up memodifikasinya
          source "$HOME/.bashrc"
          sp1up
          
          # Verifikasi instalasi untuk memastikan semuanya siap
          echo "Verifying installations..."
          "$HOME/.cargo/bin/cargo" prove --version
          "$HOME/.cargo/bin/cargo" +succinct --version

      # Langkah 5: Hitung nilai 'n' dari input rahasia pengguna
      - name: Calculate N
        id: calculate_n
        shell: bash
        run: |
          a=${{ inputs.secret_a }}
          b=${{ inputs.secret_b }}
          n=$((a * b))
          echo "n_value=$n" >> $GITHUB_OUTPUT

      # Langkah 6: Jalankan Prover Script dengan input dari pengguna
      - name: Run ZK Prover
        shell: bash
        run: |
          source "$HOME/.cargo/env"
          echo "Starting ZK proof generation for n=${{ steps.calculate_n.outputs.n_value }}..."
          cargo run --release -p proof-of-secret-script -- --n ${{ steps.calculate_n.outputs.n_value }} --a ${{ inputs.secret_a }} --b ${{ inputs.secret_b }}
        timeout-minutes: 30

      # Langkah 7: Jalankan Converter Script untuk mendapatkan output final
      - name: Convert Proof to Sui Arguments
        shell: bash
        run: |
          source "$HOME/.cargo/env"
          echo "Converting proof and printing arguments..."
          cargo run --release -p proof-converter-script
